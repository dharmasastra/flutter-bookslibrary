// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'models.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:TbFavorite.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// TbFavorite TABLE
class TableTbFavorite extends SqfEntityTableBase {
  TableTbFavorite() {
    // declare properties of EntityTable
    tableName = 'tbFavorite';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('id_books', DbType.integer),
      SqfEntityFieldBase('title', DbType.text),
      SqfEntityFieldBase('description', DbType.text),
      SqfEntityFieldBase('author', DbType.text),
      SqfEntityFieldBase('publisher', DbType.text),
      SqfEntityFieldBase('pages', DbType.integer),
      SqfEntityFieldBase('category', DbType.text),
      SqfEntityFieldBase('imageUrl', DbType.text),
      SqfEntityFieldBase('rating', DbType.real),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableTbFavorite();
  }
}

// TbHistory TABLE
class TableTbHistory extends SqfEntityTableBase {
  TableTbHistory() {
    // declare properties of EntityTable
    tableName = 'tbHistory';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('id_books', DbType.integer),
      SqfEntityFieldBase('title', DbType.text),
      SqfEntityFieldBase('description', DbType.text),
      SqfEntityFieldBase('author', DbType.text),
      SqfEntityFieldBase('publisher', DbType.text),
      SqfEntityFieldBase('pages', DbType.integer),
      SqfEntityFieldBase('category', DbType.text),
      SqfEntityFieldBase('imageUrl', DbType.text),
      SqfEntityFieldBase('rating', DbType.real),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableTbHistory();
  }
}
// END TABLES

// BEGIN SEQUENCES
// identity SEQUENCE
class SequenceIdentitySequence extends SqfEntitySequenceBase {
  SequenceIdentitySequence() {
    sequenceName = 'identity';
    maxValue =
        9223372036854775807; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 0; /* optional. default is 0 */
    super.init();
  }
  static SequenceIdentitySequence _instance;
  static SequenceIdentitySequence get getInstance {
    return _instance = _instance ?? SequenceIdentitySequence();
  }
}
// END SEQUENCES

// BEGIN DATABASE MODEL
class MyDbModel extends SqfEntityModelProvider {
  MyDbModel() {
    databaseName = myDbModel.databaseName;
    databaseTables = [
      TableTbFavorite.getInstance,
      TableTbHistory.getInstance,
    ];

    sequences = [
      SequenceIdentitySequence.getInstance,
    ];

    bundledDatabasePath = myDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region TbFavorite
class TbFavorite {
  TbFavorite(
      {this.id,
      this.id_books,
      this.title,
      this.description,
      this.author,
      this.publisher,
      this.pages,
      this.category,
      this.imageUrl,
      this.rating,
      this.isDeleted}) {
    setDefaultValues();
  }
  TbFavorite.withFields(
      this.id_books,
      this.title,
      this.description,
      this.author,
      this.publisher,
      this.pages,
      this.category,
      this.imageUrl,
      this.rating,
      this.isDeleted) {
    setDefaultValues();
  }
  TbFavorite.withId(
      this.id,
      this.id_books,
      this.title,
      this.description,
      this.author,
      this.publisher,
      this.pages,
      this.category,
      this.imageUrl,
      this.rating,
      this.isDeleted) {
    setDefaultValues();
  }
  TbFavorite.fromMap(Map<String, dynamic> o) {
    id = o['id'] as int;
    id_books = o['id_books'] as int;

    title = o['title'] as String;

    description = o['description'] as String;

    author = o['author'] as String;

    publisher = o['publisher'] as String;

    pages = o['pages'] as int;

    category = o['category'] as String;

    imageUrl = o['imageUrl'] as String;

    rating = o['rating'] as double;

    isDeleted = o['isDeleted'] != null ? o['isDeleted'] == 1 : null;
  }
  // FIELDS
  int id;
  int id_books;
  String title;
  String description;
  String author;
  String publisher;
  int pages;
  String category;
  String imageUrl;
  double rating;
  bool isDeleted;
  // end FIELDS

  static const bool _softDeleteActivated = true;
  TbFavoriteManager __mnTbFavorite;

  TbFavoriteManager get _mnTbFavorite {
    return __mnTbFavorite = __mnTbFavorite ?? TbFavoriteManager();
  }

  // methods
  Map<String, dynamic> toMap({bool forQuery = false}) {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (id_books != null) {
      map['id_books'] = id_books;
    }

    if (title != null) {
      map['title'] = title;
    }

    if (description != null) {
      map['description'] = description;
    }

    if (author != null) {
      map['author'] = author;
    }

    if (publisher != null) {
      map['publisher'] = publisher;
    }

    if (pages != null) {
      map['pages'] = pages;
    }

    if (category != null) {
      map['category'] = category;
    }

    if (imageUrl != null) {
      map['imageUrl'] = imageUrl;
    }

    if (rating != null) {
      map['rating'] = rating;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  // methods
  Future<Map<String, dynamic>> toMapWithChilds([bool forQuery = false]) async {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (id_books != null) {
      map['id_books'] = id_books;
    }

    if (title != null) {
      map['title'] = title;
    }

    if (description != null) {
      map['description'] = description;
    }

    if (author != null) {
      map['author'] = author;
    }

    if (publisher != null) {
      map['publisher'] = publisher;
    }

    if (pages != null) {
      map['pages'] = pages;
    }

    if (category != null) {
      map['category'] = category;
    }

    if (imageUrl != null) {
      map['imageUrl'] = imageUrl;
    }

    if (rating != null) {
      map['rating'] = rating;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method always returns Json String
  String toJson() {
    return json.encode(toMap());
  }

  /// This method always returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds());
  }

  List<dynamic> toArgs() {
    return [
      id,
      id_books,
      title,
      description,
      author,
      publisher,
      pages,
      category,
      imageUrl,
      rating,
      isDeleted
    ];
  }

  static Future<List<TbFavorite>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR TbFavorite.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<TbFavorite>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = List<TbFavorite>();
    try {
      objList = list
          .map((tbfavorite) =>
              TbFavorite.fromMap(tbfavorite as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR TbFavorite.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<TbFavorite>> fromObjectList(
      Future<List<dynamic>> o) async {
    final tbfavoritesList = List<TbFavorite>();
    final data = await o;
    for (int i = 0; i < data.length; i++) {
      tbfavoritesList.add(TbFavorite.fromMap(data[i] as Map<String, dynamic>));
    }
    return tbfavoritesList;
  }

  static List<TbFavorite> fromMapList(List<Map<String, dynamic>> query) {
    final List<TbFavorite> tbfavorites = List<TbFavorite>();
    for (Map map in query) {
      tbfavorites.add(TbFavorite.fromMap(map as Map<String, dynamic>));
    }
    return tbfavorites;
  }

  /// returns TbFavorite by ID if exist, otherwise returns null
  /// <param name='id'>Primary Key Value</param>
  /// <returns>returns TbFavorite if exist, otherwise returns null
  Future<TbFavorite> getById(int id) async {
    TbFavorite tbfavoriteObj;
    final data = await _mnTbFavorite.getById(id);
    if (data.length != 0) {
      tbfavoriteObj = TbFavorite.fromMap(data[0] as Map<String, dynamic>);
    } else {
      tbfavoriteObj = null;
    }
    return tbfavoriteObj;
  }

  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnTbFavorite.insert(this);
    } else {
      id = await _upsert();
    }
    return id;
  }

  /// saveAs TbFavorite. Returns a new Primary Key value of TbFavorite

  /// <returns>Returns a new Primary Key value of TbFavorite
  Future<int> saveAs() async {
    id = null;
    return save();
  }

  /// saveAll method saves the sent List<TbFavorite> as a batch in one transaction
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> saveAll(List<TbFavorite> tbfavorites) async {
    final results = _mnTbFavorite.saveAll(
        'INSERT OR REPLACE INTO tbFavorite (id,  id_books, title, description, author, publisher, pages, category, imageUrl, rating,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',
        tbfavorites);
    return results;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> _upsert() async {
    return id = await _mnTbFavorite.rawInsert(
        'INSERT OR REPLACE INTO tbFavorite (id,  id_books, title, description, author, publisher, pages, category, imageUrl, rating,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',
        [
          id,
          id_books,
          title,
          description,
          author,
          publisher,
          pages,
          category,
          imageUrl,
          rating,
          isDeleted
        ]);
  }

  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> upsertAll(List<TbFavorite> tbfavorites) async {
    final results = await _mnTbFavorite.rawInsertAll(
        'INSERT OR REPLACE INTO tbFavorite (id,  id_books, title, description, author, publisher, pages, category, imageUrl, rating,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',
        tbfavorites);
    return results;
  }

  /// Deletes TbFavorite

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete TbFavorite invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnTbFavorite
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnTbFavorite.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover TbFavorite>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover TbFavorite invoked (id=$id)');
    {
      return _mnTbFavorite.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  //private TbFavoriteFilterBuilder _Select;
  TbFavoriteFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return TbFavoriteFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  TbFavoriteFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return TbFavoriteFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }
  //end methods
}
// endregion tbfavorite

// region TbFavoriteField
class TbFavoriteField extends SearchCriteria {
  TbFavoriteField(this.tbfavoriteFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  TbFavoriteFilterBuilder tbfavoriteFB;

  TbFavoriteField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  TbFavoriteFilterBuilder equals(var pValue) {
    param.expression = '=';
    tbfavoriteFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbfavoriteFB.parameters, param, SqlSyntax.EQuals,
            tbfavoriteFB._addedBlocks)
        : setCriteria(pValue, tbfavoriteFB.parameters, param,
            SqlSyntax.NotEQuals, tbfavoriteFB._addedBlocks);
    _waitingNot = '';
    tbfavoriteFB._addedBlocks.needEndBlock[tbfavoriteFB._blockIndex] =
        tbfavoriteFB._addedBlocks.retVal;
    return tbfavoriteFB;
  }

  TbFavoriteFilterBuilder isNull() {
    tbfavoriteFB._addedBlocks = setCriteria(
        0,
        tbfavoriteFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        tbfavoriteFB._addedBlocks);
    _waitingNot = '';
    tbfavoriteFB._addedBlocks.needEndBlock[tbfavoriteFB._blockIndex] =
        tbfavoriteFB._addedBlocks.retVal;
    return tbfavoriteFB;
  }

  TbFavoriteFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      tbfavoriteFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          tbfavoriteFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tbfavoriteFB._addedBlocks);
      _waitingNot = '';
      tbfavoriteFB._addedBlocks.needEndBlock[tbfavoriteFB._blockIndex] =
          tbfavoriteFB._addedBlocks.retVal;
    }
    return tbfavoriteFB;
  }

  TbFavoriteFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      tbfavoriteFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          tbfavoriteFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tbfavoriteFB._addedBlocks);
      _waitingNot = '';
      tbfavoriteFB._addedBlocks.needEndBlock[tbfavoriteFB._blockIndex] =
          tbfavoriteFB._addedBlocks.retVal;
      tbfavoriteFB._addedBlocks.needEndBlock[tbfavoriteFB._blockIndex] =
          tbfavoriteFB._addedBlocks.retVal;
    }
    return tbfavoriteFB;
  }

  TbFavoriteFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      tbfavoriteFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          tbfavoriteFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tbfavoriteFB._addedBlocks);
      _waitingNot = '';
      tbfavoriteFB._addedBlocks.needEndBlock[tbfavoriteFB._blockIndex] =
          tbfavoriteFB._addedBlocks.retVal;
    }
    return tbfavoriteFB;
  }

  TbFavoriteFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      tbfavoriteFB._addedBlocks = setCriteria(
          pFirst,
          tbfavoriteFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tbfavoriteFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        tbfavoriteFB._addedBlocks = setCriteria(pFirst, tbfavoriteFB.parameters,
            param, SqlSyntax.LessThan, tbfavoriteFB._addedBlocks);
      } else {
        tbfavoriteFB._addedBlocks = setCriteria(pFirst, tbfavoriteFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, tbfavoriteFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        tbfavoriteFB._addedBlocks = setCriteria(pLast, tbfavoriteFB.parameters,
            param, SqlSyntax.GreaterThan, tbfavoriteFB._addedBlocks);
      } else {
        tbfavoriteFB._addedBlocks = setCriteria(pLast, tbfavoriteFB.parameters,
            param, SqlSyntax.LessThanOrEquals, tbfavoriteFB._addedBlocks);
      }
    }
    _waitingNot = '';
    tbfavoriteFB._addedBlocks.needEndBlock[tbfavoriteFB._blockIndex] =
        tbfavoriteFB._addedBlocks.retVal;
    return tbfavoriteFB;
  }

  TbFavoriteFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    tbfavoriteFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbfavoriteFB.parameters, param,
            SqlSyntax.GreaterThan, tbfavoriteFB._addedBlocks)
        : setCriteria(pValue, tbfavoriteFB.parameters, param,
            SqlSyntax.LessThanOrEquals, tbfavoriteFB._addedBlocks);
    _waitingNot = '';
    tbfavoriteFB._addedBlocks.needEndBlock[tbfavoriteFB._blockIndex] =
        tbfavoriteFB._addedBlocks.retVal;
    return tbfavoriteFB;
  }

  TbFavoriteFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    tbfavoriteFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbfavoriteFB.parameters, param,
            SqlSyntax.LessThan, tbfavoriteFB._addedBlocks)
        : setCriteria(pValue, tbfavoriteFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, tbfavoriteFB._addedBlocks);
    _waitingNot = '';
    tbfavoriteFB._addedBlocks.needEndBlock[tbfavoriteFB._blockIndex] =
        tbfavoriteFB._addedBlocks.retVal;
    return tbfavoriteFB;
  }

  TbFavoriteFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    tbfavoriteFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbfavoriteFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, tbfavoriteFB._addedBlocks)
        : setCriteria(pValue, tbfavoriteFB.parameters, param,
            SqlSyntax.LessThan, tbfavoriteFB._addedBlocks);
    _waitingNot = '';
    tbfavoriteFB._addedBlocks.needEndBlock[tbfavoriteFB._blockIndex] =
        tbfavoriteFB._addedBlocks.retVal;
    return tbfavoriteFB;
  }

  TbFavoriteFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    tbfavoriteFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbfavoriteFB.parameters, param,
            SqlSyntax.LessThanOrEquals, tbfavoriteFB._addedBlocks)
        : setCriteria(pValue, tbfavoriteFB.parameters, param,
            SqlSyntax.GreaterThan, tbfavoriteFB._addedBlocks);
    _waitingNot = '';
    tbfavoriteFB._addedBlocks.needEndBlock[tbfavoriteFB._blockIndex] =
        tbfavoriteFB._addedBlocks.retVal;
    return tbfavoriteFB;
  }

  TbFavoriteFilterBuilder inValues(var pValue) {
    tbfavoriteFB._addedBlocks = setCriteria(
        pValue,
        tbfavoriteFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        tbfavoriteFB._addedBlocks);
    _waitingNot = '';
    tbfavoriteFB._addedBlocks.needEndBlock[tbfavoriteFB._blockIndex] =
        tbfavoriteFB._addedBlocks.retVal;
    return tbfavoriteFB;
  }
}
// endregion TbFavoriteField

// region TbFavoriteFilterBuilder
class TbFavoriteFilterBuilder extends SearchCriteria {
  TbFavoriteFilterBuilder(TbFavorite obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = AddedBlocks(List<bool>(), List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  TbFavorite _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  TbFavoriteFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  TbFavoriteFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  TbFavoriteFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  TbFavoriteFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks =
          setCriteria(0, parameters, param, '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  TbFavoriteFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  TbFavoriteFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  TbFavoriteFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  TbFavoriteFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  TbFavoriteFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  TbFavoriteFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  TbFavoriteField setField(
      TbFavoriteField field, String colName, DbType dbtype) {
    return TbFavoriteField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  TbFavoriteField _id;
  TbFavoriteField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  TbFavoriteField _id_books;
  TbFavoriteField get id_books {
    return _id_books = setField(_id_books, 'id_books', DbType.integer);
  }

  TbFavoriteField _title;
  TbFavoriteField get title {
    return _title = setField(_title, 'title', DbType.text);
  }

  TbFavoriteField _description;
  TbFavoriteField get description {
    return _description = setField(_description, 'description', DbType.text);
  }

  TbFavoriteField _author;
  TbFavoriteField get author {
    return _author = setField(_author, 'author', DbType.text);
  }

  TbFavoriteField _publisher;
  TbFavoriteField get publisher {
    return _publisher = setField(_publisher, 'publisher', DbType.text);
  }

  TbFavoriteField _pages;
  TbFavoriteField get pages {
    return _pages = setField(_pages, 'pages', DbType.integer);
  }

  TbFavoriteField _category;
  TbFavoriteField get category {
    return _category = setField(_category, 'category', DbType.text);
  }

  TbFavoriteField _imageUrl;
  TbFavoriteField get imageUrl {
    return _imageUrl = setField(_imageUrl, 'imageUrl', DbType.text);
  }

  TbFavoriteField _rating;
  TbFavoriteField get rating {
    return _rating = setField(_rating, 'rating', DbType.real);
  }

  TbFavoriteField _isDeleted;
  TbFavoriteField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) {
              param.value = param.value == true ? 1 : 0;
            }
            break;
          default:
        }

        if (param.value != null) {
          whereArguments.add(param.value);
        }
        if (param.value2 != null) {
          whereArguments.add(param.value2);
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (TbFavorite._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// <summary>
  /// Deletes List<TbFavorite> batch by query

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    if (TbFavorite._softDeleteActivated && !hardDelete) {
      r = await _obj._mnTbFavorite.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnTbFavorite.delete(qparams);
    }
    return r;
  }

  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover TbFavorite batch invoked');
    return _obj._mnTbFavorite.updateBatch(qparams, {'isDeleted': 0});
  }

  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnTbFavorite.updateBatch(qparams, values);
  }

  /// This method always returns TbFavoriteObj if exist, otherwise returns null
  /// <returns>List<TbFavorite>
  Future<TbFavorite> toSingle([VoidCallback tbfavorite(TbFavorite o)]) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnTbFavorite.toList(qparams);
    final data = await objFuture;
    TbFavorite retVal;
    if (data.isNotEmpty) {
      retVal = TbFavorite.fromMap(data[0] as Map<String, dynamic>);
    } else {
      retVal = null;
    }
    if (tbfavorite != null) {
      tbfavorite(retVal);
    }
    return retVal;
  }

  /// This method always returns int.
  /// <returns>int
  Future<int> toCount([VoidCallback tbfavoriteCount(int c)]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final tbfavoritesFuture = await _obj._mnTbFavorite.toList(qparams);
    final int count = tbfavoritesFuture[0]['CNT'] as int;
    if (tbfavoriteCount != null) {
      tbfavoriteCount(count);
    }
    return count;
  }

  /// This method always returns List<TbFavorite>.
  /// <returns>List<TbFavorite>
  Future<List<TbFavorite>> toList(
      [VoidCallback tbfavoriteList(List<TbFavorite> o)]) async {
    final List<TbFavorite> tbfavoritesData = List<TbFavorite>();
    final data = await toMapList();
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      tbfavoritesData.add(TbFavorite.fromMap(data[i] as Map<String, dynamic>));
    }
    if (tbfavoriteList != null) tbfavoriteList(tbfavoritesData);
    return tbfavoritesData;
  }

  /// This method always returns Json String
  Future<String> toJson() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap());
    }
    return json.encode(list);
  }

  /// This method always returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds());
    }
    return json.encode(list);
  }

  /// This method always returns List<dynamic>.
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnTbFavorite.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<TbFavorite>>
  Future<List<DropdownMenuItem<TbFavorite>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<TbFavorite>> o)]) async {
    _buildParameters();
    final tbfavoritesFuture = _obj._mnTbFavorite.toList(qparams);

    final data = await tbfavoritesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<TbFavorite>> items = List()
      ..add(DropdownMenuItem(
        value: TbFavorite(),
        child: Text('Select TbFavorite'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: TbFavorite.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<int>> o)]) async {
    _buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final tbfavoritesFuture = _obj._mnTbFavorite.toList(qparams);

    final data = await tbfavoritesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = List()
      ..add(DropdownMenuItem(
        value: 0,
        child: Text('Select TbFavorite'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> idData = List<int>();
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnTbFavorite.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject(
      [VoidCallback listObject(List<dynamic> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnTbFavorite.toList(qparams);

    final List<dynamic> objectsData = List<dynamic>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    if (listObject != null) {
      listObject(objectsData);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await TbFavorite.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback listString(List<String> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnTbFavorite.toList(qparams);

    final List<String> objectsData = List<String>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion TbFavoriteFilterBuilder

// region TbFavoriteFields
class TbFavoriteFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fId_books;
  static TableField get id_books {
    return _fId_books = _fId_books ??
        SqlSyntax.setField(_fId_books, 'id_books', DbType.integer);
  }

  static TableField _fTitle;
  static TableField get title {
    return _fTitle =
        _fTitle ?? SqlSyntax.setField(_fTitle, 'title', DbType.text);
  }

  static TableField _fDescription;
  static TableField get description {
    return _fDescription = _fDescription ??
        SqlSyntax.setField(_fDescription, 'description', DbType.text);
  }

  static TableField _fAuthor;
  static TableField get author {
    return _fAuthor =
        _fAuthor ?? SqlSyntax.setField(_fAuthor, 'author', DbType.text);
  }

  static TableField _fPublisher;
  static TableField get publisher {
    return _fPublisher = _fPublisher ??
        SqlSyntax.setField(_fPublisher, 'publisher', DbType.text);
  }

  static TableField _fPages;
  static TableField get pages {
    return _fPages =
        _fPages ?? SqlSyntax.setField(_fPages, 'pages', DbType.integer);
  }

  static TableField _fCategory;
  static TableField get category {
    return _fCategory =
        _fCategory ?? SqlSyntax.setField(_fCategory, 'category', DbType.text);
  }

  static TableField _fImageUrl;
  static TableField get imageUrl {
    return _fImageUrl =
        _fImageUrl ?? SqlSyntax.setField(_fImageUrl, 'imageUrl', DbType.text);
  }

  static TableField _fRating;
  static TableField get rating {
    return _fRating =
        _fRating ?? SqlSyntax.setField(_fRating, 'rating', DbType.real);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion TbFavoriteFields

//region TbFavoriteManager
class TbFavoriteManager extends SqfEntityProvider {
  TbFavoriteManager()
      : super(MyDbModel(), tableName: _tableName, colId: _colId);
  static String _tableName = 'tbFavorite';
  static String _colId = 'id';
}

//endregion TbFavoriteManager
// region TbHistory
class TbHistory {
  TbHistory(
      {this.id,
      this.id_books,
      this.title,
      this.description,
      this.author,
      this.publisher,
      this.pages,
      this.category,
      this.imageUrl,
      this.rating,
      this.isDeleted}) {
    setDefaultValues();
  }
  TbHistory.withFields(
      this.id_books,
      this.title,
      this.description,
      this.author,
      this.publisher,
      this.pages,
      this.category,
      this.imageUrl,
      this.rating,
      this.isDeleted) {
    setDefaultValues();
  }
  TbHistory.withId(
      this.id,
      this.id_books,
      this.title,
      this.description,
      this.author,
      this.publisher,
      this.pages,
      this.category,
      this.imageUrl,
      this.rating,
      this.isDeleted) {
    setDefaultValues();
  }
  TbHistory.fromMap(Map<String, dynamic> o) {
    id = o['id'] as int;
    id_books = o['id_books'] as int;

    title = o['title'] as String;

    description = o['description'] as String;

    author = o['author'] as String;

    publisher = o['publisher'] as String;

    pages = o['pages'] as int;

    category = o['category'] as String;

    imageUrl = o['imageUrl'] as String;

    rating = o['rating'] as double;

    isDeleted = o['isDeleted'] != null ? o['isDeleted'] == 1 : null;
  }
  // FIELDS
  int id;
  int id_books;
  String title;
  String description;
  String author;
  String publisher;
  int pages;
  String category;
  String imageUrl;
  double rating;
  bool isDeleted;
  // end FIELDS

  static const bool _softDeleteActivated = true;
  TbHistoryManager __mnTbHistory;

  TbHistoryManager get _mnTbHistory {
    return __mnTbHistory = __mnTbHistory ?? TbHistoryManager();
  }

  // methods
  Map<String, dynamic> toMap({bool forQuery = false}) {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (id_books != null) {
      map['id_books'] = id_books;
    }

    if (title != null) {
      map['title'] = title;
    }

    if (description != null) {
      map['description'] = description;
    }

    if (author != null) {
      map['author'] = author;
    }

    if (publisher != null) {
      map['publisher'] = publisher;
    }

    if (pages != null) {
      map['pages'] = pages;
    }

    if (category != null) {
      map['category'] = category;
    }

    if (imageUrl != null) {
      map['imageUrl'] = imageUrl;
    }

    if (rating != null) {
      map['rating'] = rating;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  // methods
  Future<Map<String, dynamic>> toMapWithChilds([bool forQuery = false]) async {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (id_books != null) {
      map['id_books'] = id_books;
    }

    if (title != null) {
      map['title'] = title;
    }

    if (description != null) {
      map['description'] = description;
    }

    if (author != null) {
      map['author'] = author;
    }

    if (publisher != null) {
      map['publisher'] = publisher;
    }

    if (pages != null) {
      map['pages'] = pages;
    }

    if (category != null) {
      map['category'] = category;
    }

    if (imageUrl != null) {
      map['imageUrl'] = imageUrl;
    }

    if (rating != null) {
      map['rating'] = rating;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method always returns Json String
  String toJson() {
    return json.encode(toMap());
  }

  /// This method always returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds());
  }

  List<dynamic> toArgs() {
    return [
      id,
      id_books,
      title,
      description,
      author,
      publisher,
      pages,
      category,
      imageUrl,
      rating,
      isDeleted
    ];
  }

  static Future<List<TbHistory>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR TbHistory.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<TbHistory>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = List<TbHistory>();
    try {
      objList = list
          .map((tbhistory) =>
              TbHistory.fromMap(tbhistory as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR TbHistory.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<TbHistory>> fromObjectList(Future<List<dynamic>> o) async {
    final tbhistorysList = List<TbHistory>();
    final data = await o;
    for (int i = 0; i < data.length; i++) {
      tbhistorysList.add(TbHistory.fromMap(data[i] as Map<String, dynamic>));
    }
    return tbhistorysList;
  }

  static List<TbHistory> fromMapList(List<Map<String, dynamic>> query) {
    final List<TbHistory> tbhistorys = List<TbHistory>();
    for (Map map in query) {
      tbhistorys.add(TbHistory.fromMap(map as Map<String, dynamic>));
    }
    return tbhistorys;
  }

  /// returns TbHistory by ID if exist, otherwise returns null
  /// <param name='id'>Primary Key Value</param>
  /// <returns>returns TbHistory if exist, otherwise returns null
  Future<TbHistory> getById(int id) async {
    TbHistory tbhistoryObj;
    final data = await _mnTbHistory.getById(id);
    if (data.length != 0) {
      tbhistoryObj = TbHistory.fromMap(data[0] as Map<String, dynamic>);
    } else {
      tbhistoryObj = null;
    }
    return tbhistoryObj;
  }

  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnTbHistory.insert(this);
    } else {
      id = await _upsert();
    }
    return id;
  }

  /// saveAs TbHistory. Returns a new Primary Key value of TbHistory

  /// <returns>Returns a new Primary Key value of TbHistory
  Future<int> saveAs() async {
    id = null;
    return save();
  }

  /// saveAll method saves the sent List<TbHistory> as a batch in one transaction
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> saveAll(List<TbHistory> tbhistories) async {
    final results = _mnTbHistory.saveAll(
        'INSERT OR REPLACE INTO tbHistory (id,  id_books, title, description, author, publisher, pages, category, imageUrl, rating,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',
        tbhistories);
    return results;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> _upsert() async {
    return id = await _mnTbHistory.rawInsert(
        'INSERT OR REPLACE INTO tbHistory (id,  id_books, title, description, author, publisher, pages, category, imageUrl, rating,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',
        [
          id,
          id_books,
          title,
          description,
          author,
          publisher,
          pages,
          category,
          imageUrl,
          rating,
          isDeleted
        ]);
  }

  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> upsertAll(List<TbHistory> tbhistories) async {
    final results = await _mnTbHistory.rawInsertAll(
        'INSERT OR REPLACE INTO tbHistory (id,  id_books, title, description, author, publisher, pages, category, imageUrl, rating,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',
        tbhistories);
    return results;
  }

  /// Deletes TbHistory

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete TbHistory invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnTbHistory
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnTbHistory.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover TbHistory>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover TbHistory invoked (id=$id)');
    {
      return _mnTbHistory.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  //private TbHistoryFilterBuilder _Select;
  TbHistoryFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return TbHistoryFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  TbHistoryFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return TbHistoryFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }
  //end methods
}
// endregion tbhistory

// region TbHistoryField
class TbHistoryField extends SearchCriteria {
  TbHistoryField(this.tbhistoryFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  TbHistoryFilterBuilder tbhistoryFB;

  TbHistoryField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  TbHistoryFilterBuilder equals(var pValue) {
    param.expression = '=';
    tbhistoryFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbhistoryFB.parameters, param, SqlSyntax.EQuals,
            tbhistoryFB._addedBlocks)
        : setCriteria(pValue, tbhistoryFB.parameters, param,
            SqlSyntax.NotEQuals, tbhistoryFB._addedBlocks);
    _waitingNot = '';
    tbhistoryFB._addedBlocks.needEndBlock[tbhistoryFB._blockIndex] =
        tbhistoryFB._addedBlocks.retVal;
    return tbhistoryFB;
  }

  TbHistoryFilterBuilder isNull() {
    tbhistoryFB._addedBlocks = setCriteria(
        0,
        tbhistoryFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        tbhistoryFB._addedBlocks);
    _waitingNot = '';
    tbhistoryFB._addedBlocks.needEndBlock[tbhistoryFB._blockIndex] =
        tbhistoryFB._addedBlocks.retVal;
    return tbhistoryFB;
  }

  TbHistoryFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      tbhistoryFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          tbhistoryFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tbhistoryFB._addedBlocks);
      _waitingNot = '';
      tbhistoryFB._addedBlocks.needEndBlock[tbhistoryFB._blockIndex] =
          tbhistoryFB._addedBlocks.retVal;
    }
    return tbhistoryFB;
  }

  TbHistoryFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      tbhistoryFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          tbhistoryFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tbhistoryFB._addedBlocks);
      _waitingNot = '';
      tbhistoryFB._addedBlocks.needEndBlock[tbhistoryFB._blockIndex] =
          tbhistoryFB._addedBlocks.retVal;
      tbhistoryFB._addedBlocks.needEndBlock[tbhistoryFB._blockIndex] =
          tbhistoryFB._addedBlocks.retVal;
    }
    return tbhistoryFB;
  }

  TbHistoryFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      tbhistoryFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          tbhistoryFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tbhistoryFB._addedBlocks);
      _waitingNot = '';
      tbhistoryFB._addedBlocks.needEndBlock[tbhistoryFB._blockIndex] =
          tbhistoryFB._addedBlocks.retVal;
    }
    return tbhistoryFB;
  }

  TbHistoryFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      tbhistoryFB._addedBlocks = setCriteria(
          pFirst,
          tbhistoryFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tbhistoryFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        tbhistoryFB._addedBlocks = setCriteria(pFirst, tbhistoryFB.parameters,
            param, SqlSyntax.LessThan, tbhistoryFB._addedBlocks);
      } else {
        tbhistoryFB._addedBlocks = setCriteria(pFirst, tbhistoryFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, tbhistoryFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        tbhistoryFB._addedBlocks = setCriteria(pLast, tbhistoryFB.parameters,
            param, SqlSyntax.GreaterThan, tbhistoryFB._addedBlocks);
      } else {
        tbhistoryFB._addedBlocks = setCriteria(pLast, tbhistoryFB.parameters,
            param, SqlSyntax.LessThanOrEquals, tbhistoryFB._addedBlocks);
      }
    }
    _waitingNot = '';
    tbhistoryFB._addedBlocks.needEndBlock[tbhistoryFB._blockIndex] =
        tbhistoryFB._addedBlocks.retVal;
    return tbhistoryFB;
  }

  TbHistoryFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    tbhistoryFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbhistoryFB.parameters, param,
            SqlSyntax.GreaterThan, tbhistoryFB._addedBlocks)
        : setCriteria(pValue, tbhistoryFB.parameters, param,
            SqlSyntax.LessThanOrEquals, tbhistoryFB._addedBlocks);
    _waitingNot = '';
    tbhistoryFB._addedBlocks.needEndBlock[tbhistoryFB._blockIndex] =
        tbhistoryFB._addedBlocks.retVal;
    return tbhistoryFB;
  }

  TbHistoryFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    tbhistoryFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbhistoryFB.parameters, param, SqlSyntax.LessThan,
            tbhistoryFB._addedBlocks)
        : setCriteria(pValue, tbhistoryFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, tbhistoryFB._addedBlocks);
    _waitingNot = '';
    tbhistoryFB._addedBlocks.needEndBlock[tbhistoryFB._blockIndex] =
        tbhistoryFB._addedBlocks.retVal;
    return tbhistoryFB;
  }

  TbHistoryFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    tbhistoryFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbhistoryFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, tbhistoryFB._addedBlocks)
        : setCriteria(pValue, tbhistoryFB.parameters, param, SqlSyntax.LessThan,
            tbhistoryFB._addedBlocks);
    _waitingNot = '';
    tbhistoryFB._addedBlocks.needEndBlock[tbhistoryFB._blockIndex] =
        tbhistoryFB._addedBlocks.retVal;
    return tbhistoryFB;
  }

  TbHistoryFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    tbhistoryFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbhistoryFB.parameters, param,
            SqlSyntax.LessThanOrEquals, tbhistoryFB._addedBlocks)
        : setCriteria(pValue, tbhistoryFB.parameters, param,
            SqlSyntax.GreaterThan, tbhistoryFB._addedBlocks);
    _waitingNot = '';
    tbhistoryFB._addedBlocks.needEndBlock[tbhistoryFB._blockIndex] =
        tbhistoryFB._addedBlocks.retVal;
    return tbhistoryFB;
  }

  TbHistoryFilterBuilder inValues(var pValue) {
    tbhistoryFB._addedBlocks = setCriteria(
        pValue,
        tbhistoryFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        tbhistoryFB._addedBlocks);
    _waitingNot = '';
    tbhistoryFB._addedBlocks.needEndBlock[tbhistoryFB._blockIndex] =
        tbhistoryFB._addedBlocks.retVal;
    return tbhistoryFB;
  }
}
// endregion TbHistoryField

// region TbHistoryFilterBuilder
class TbHistoryFilterBuilder extends SearchCriteria {
  TbHistoryFilterBuilder(TbHistory obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = AddedBlocks(List<bool>(), List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  TbHistory _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  TbHistoryFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  TbHistoryFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  TbHistoryFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  TbHistoryFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks =
          setCriteria(0, parameters, param, '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  TbHistoryFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  TbHistoryFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  TbHistoryFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  TbHistoryFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  TbHistoryFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  TbHistoryFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  TbHistoryField setField(TbHistoryField field, String colName, DbType dbtype) {
    return TbHistoryField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  TbHistoryField _id;
  TbHistoryField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  TbHistoryField _id_books;
  TbHistoryField get id_books {
    return _id_books = setField(_id_books, 'id_books', DbType.integer);
  }

  TbHistoryField _title;
  TbHistoryField get title {
    return _title = setField(_title, 'title', DbType.text);
  }

  TbHistoryField _description;
  TbHistoryField get description {
    return _description = setField(_description, 'description', DbType.text);
  }

  TbHistoryField _author;
  TbHistoryField get author {
    return _author = setField(_author, 'author', DbType.text);
  }

  TbHistoryField _publisher;
  TbHistoryField get publisher {
    return _publisher = setField(_publisher, 'publisher', DbType.text);
  }

  TbHistoryField _pages;
  TbHistoryField get pages {
    return _pages = setField(_pages, 'pages', DbType.integer);
  }

  TbHistoryField _category;
  TbHistoryField get category {
    return _category = setField(_category, 'category', DbType.text);
  }

  TbHistoryField _imageUrl;
  TbHistoryField get imageUrl {
    return _imageUrl = setField(_imageUrl, 'imageUrl', DbType.text);
  }

  TbHistoryField _rating;
  TbHistoryField get rating {
    return _rating = setField(_rating, 'rating', DbType.real);
  }

  TbHistoryField _isDeleted;
  TbHistoryField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) {
              param.value = param.value == true ? 1 : 0;
            }
            break;
          default:
        }

        if (param.value != null) {
          whereArguments.add(param.value);
        }
        if (param.value2 != null) {
          whereArguments.add(param.value2);
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (TbHistory._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// <summary>
  /// Deletes List<TbHistory> batch by query

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    if (TbHistory._softDeleteActivated && !hardDelete) {
      r = await _obj._mnTbHistory.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnTbHistory.delete(qparams);
    }
    return r;
  }

  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover TbHistory batch invoked');
    return _obj._mnTbHistory.updateBatch(qparams, {'isDeleted': 0});
  }

  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnTbHistory.updateBatch(qparams, values);
  }

  /// This method always returns TbHistoryObj if exist, otherwise returns null
  /// <returns>List<TbHistory>
  Future<TbHistory> toSingle([VoidCallback tbhistory(TbHistory o)]) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnTbHistory.toList(qparams);
    final data = await objFuture;
    TbHistory retVal;
    if (data.isNotEmpty) {
      retVal = TbHistory.fromMap(data[0] as Map<String, dynamic>);
    } else {
      retVal = null;
    }
    if (tbhistory != null) {
      tbhistory(retVal);
    }
    return retVal;
  }

  /// This method always returns int.
  /// <returns>int
  Future<int> toCount([VoidCallback tbhistoryCount(int c)]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final tbhistoriesFuture = await _obj._mnTbHistory.toList(qparams);
    final int count = tbhistoriesFuture[0]['CNT'] as int;
    if (tbhistoryCount != null) {
      tbhistoryCount(count);
    }
    return count;
  }

  /// This method always returns List<TbHistory>.
  /// <returns>List<TbHistory>
  Future<List<TbHistory>> toList(
      [VoidCallback tbhistoryList(List<TbHistory> o)]) async {
    final List<TbHistory> tbhistoriesData = List<TbHistory>();
    final data = await toMapList();
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      tbhistoriesData.add(TbHistory.fromMap(data[i] as Map<String, dynamic>));
    }
    if (tbhistoryList != null) tbhistoryList(tbhistoriesData);
    return tbhistoriesData;
  }

  /// This method always returns Json String
  Future<String> toJson() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap());
    }
    return json.encode(list);
  }

  /// This method always returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds());
    }
    return json.encode(list);
  }

  /// This method always returns List<dynamic>.
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnTbHistory.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<TbHistory>>
  Future<List<DropdownMenuItem<TbHistory>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<TbHistory>> o)]) async {
    _buildParameters();
    final tbhistoriesFuture = _obj._mnTbHistory.toList(qparams);

    final data = await tbhistoriesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<TbHistory>> items = List()
      ..add(DropdownMenuItem(
        value: TbHistory(),
        child: Text('Select TbHistory'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: TbHistory.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<int>> o)]) async {
    _buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final tbhistoriesFuture = _obj._mnTbHistory.toList(qparams);

    final data = await tbhistoriesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = List()
      ..add(DropdownMenuItem(
        value: 0,
        child: Text('Select TbHistory'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> idData = List<int>();
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnTbHistory.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject(
      [VoidCallback listObject(List<dynamic> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnTbHistory.toList(qparams);

    final List<dynamic> objectsData = List<dynamic>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    if (listObject != null) {
      listObject(objectsData);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await TbHistory.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback listString(List<String> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnTbHistory.toList(qparams);

    final List<String> objectsData = List<String>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion TbHistoryFilterBuilder

// region TbHistoryFields
class TbHistoryFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fId_books;
  static TableField get id_books {
    return _fId_books = _fId_books ??
        SqlSyntax.setField(_fId_books, 'id_books', DbType.integer);
  }

  static TableField _fTitle;
  static TableField get title {
    return _fTitle =
        _fTitle ?? SqlSyntax.setField(_fTitle, 'title', DbType.text);
  }

  static TableField _fDescription;
  static TableField get description {
    return _fDescription = _fDescription ??
        SqlSyntax.setField(_fDescription, 'description', DbType.text);
  }

  static TableField _fAuthor;
  static TableField get author {
    return _fAuthor =
        _fAuthor ?? SqlSyntax.setField(_fAuthor, 'author', DbType.text);
  }

  static TableField _fPublisher;
  static TableField get publisher {
    return _fPublisher = _fPublisher ??
        SqlSyntax.setField(_fPublisher, 'publisher', DbType.text);
  }

  static TableField _fPages;
  static TableField get pages {
    return _fPages =
        _fPages ?? SqlSyntax.setField(_fPages, 'pages', DbType.integer);
  }

  static TableField _fCategory;
  static TableField get category {
    return _fCategory =
        _fCategory ?? SqlSyntax.setField(_fCategory, 'category', DbType.text);
  }

  static TableField _fImageUrl;
  static TableField get imageUrl {
    return _fImageUrl =
        _fImageUrl ?? SqlSyntax.setField(_fImageUrl, 'imageUrl', DbType.text);
  }

  static TableField _fRating;
  static TableField get rating {
    return _fRating =
        _fRating ?? SqlSyntax.setField(_fRating, 'rating', DbType.real);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion TbHistoryFields

//region TbHistoryManager
class TbHistoryManager extends SqfEntityProvider {
  TbHistoryManager() : super(MyDbModel(), tableName: _tableName, colId: _colId);
  static String _tableName = 'tbHistory';
  static String _colId = 'id';
}

//endregion TbHistoryManager
/// Region SEQUENCE IdentitySequence
class IdentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback nextval(int o)]) async {
    final val = await MyDbModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback currentval(int o)]) async {
    final val = await MyDbModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback currentval(int o)]) async {
    final val = await MyDbModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE IdentitySequence

class MyDbModelSequenceManager extends SqfEntityProvider {
  MyDbModelSequenceManager() : super(MyDbModel());
}
// END OF ENTITIES
